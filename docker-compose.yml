version: '3.8'

services:
  # Evolution API - WhatsApp API
  evolution-api:
    image: atendai/evolution-api:latest
    container_name: evolution-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SERVER_TYPE=${EVOLUTION_SERVER_TYPE:-http}
      - SERVER_PORT=8080
      - DEL_INSTANCE=${EVOLUTION_DEL_INSTANCE:-false}
      - DATABASE_ENABLED=${DATABASE_ENABLED:-true}
      - DATABASE_CONNECTION_URI=${DATABASE_CONNECTION_URI}
      - DATABASE_CONNECTION_DB_PREFIX_NAME=${DATABASE_CONNECTION_DB_PREFIX_NAME:-evolution}
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_URI=${REDIS_URI}
      - REDIS_PREFIX_KEY=${REDIS_PREFIX_KEY:-evolution}
      - RABBITMQ_ENABLED=${RABBITMQ_ENABLED:-false}
      - CONFIG_SESSION_PHONE_CLIENT=${CONFIG_SESSION_PHONE_CLIENT:-Evolution API}
      - CONFIG_SESSION_PHONE_NAME=${CONFIG_SESSION_PHONE_NAME:-Chrome}
      - AUTHENTICATION_TYPE=${EVOLUTION_AUTH_TYPE:-apikey}
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY}
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=${EVOLUTION_EXPOSE_FETCH:-true}
      - LANGUAGE=${EVOLUTION_LANGUAGE:-es-MX}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      - LOG_COLOR=${LOG_COLOR:-true}
      - LOG_BAILEYS=${LOG_BAILEYS:-error}
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    networks:
      - app-network
    depends_on:
      - redis
      - postgres

  # n8n - Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=${N8N_HOST:-0.0.0.0}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - GENERIC_TIMEZONE=${TIMEZONE:-America/Mexico_City}
      - DB_TYPE=${N8N_DB_TYPE:-postgresdb}
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network
    depends_on:
      - postgres

  # Ollama - Local LLM con modelo pre-instalado
  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    container_name: ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_KEEP_ALIVE=5m
      - OLLAMA_MAX_LOADED_MODELS=1
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network

  # Ollama Manager - Interface web para gestionar modelos
  ollama-manager:
    build:
      context: .
      dockerfile: Dockerfile.manager
    container_name: ollama-manager
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - OLLAMA_URL=http://ollama:11434
      - NODE_ENV=production
    networks:
      - app-network
    depends_on:
      - ollama

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    ports:
      - "6379:6379"

  # Nginx Reverse Proxy (para organizar puertos en Render)
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - evolution-api
      - n8n
      - ollama
      - ollama-manager

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  ollama_data:
  evolution_instances:
  evolution_store:

networks:
  app-network:
    driver: bridge