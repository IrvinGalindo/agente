upstream ollama {
    server ollama:11434;
}

upstream n8n {
    server n8n:5678;
}

upstream evolution-api {
    server evolution-api:8080;
}

server {
    listen 80;
    server_name _;
    
    # Aumentar tamaños de buffer y timeouts
    client_max_body_size 100M;
    proxy_connect_timeout 600s;
    proxy_send_timeout 600s;
    proxy_read_timeout 600s;
    send_timeout 600s;

    # Headers para proxies
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Ruta raíz - redirigir a Ollama por defecto
    location / {
        proxy_pass http://ollama;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }

    # Ruta para Ollama
    location /ollama {
        rewrite ^/ollama(.*) $1 break;
        proxy_pass http://ollama;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }

    # API de Ollama
    location /api/ {
        proxy_pass http://ollama;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }

    # Ruta para n8n
    location /n8n {
        rewrite ^/n8n(.*) $1 break;
        proxy_pass http://n8n;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        
        # Headers específicos para n8n con base de datos externa
        proxy_set_header Accept-Encoding gzip;
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # WebSocket para n8n
    location /n8n/rest/push {
        rewrite ^/n8n(.*) $1 break;
        proxy_pass http://n8n;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 86400;
    }

    # API de n8n
    location /n8n/rest/ {
        rewrite ^/n8n(.*) $1 break;
        proxy_pass http://n8n;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }

    # Ruta para Evolution API
    location /evolution {
        rewrite ^/evolution(.*) $1 break;
        proxy_pass http://evolution-api;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        
        # Headers específicos para Evolution API con Redis
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }

    # API específicas de Evolution API
    location /evolution/instance {
        rewrite ^/evolution(.*) $1 break;
        proxy_pass http://evolution-api;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }

    # Manager de Evolution API
    location /evolution/manager {
        rewrite ^/evolution(.*) $1 break;
        proxy_pass http://evolution-api;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }

    # WebSocket para Evolution API
    location /evolution/ws {
        rewrite ^/evolution(.*) $1 break;
        proxy_pass http://evolution-api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 86400;
    }

    # Health checks
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Status page
    location /status {
        access_log off;
        return 200 "Services: Ollama, n8n, Evolution API\nStatus: Running\n";
        add_header Content-Type text/plain;
    }

    # Logs y error pages
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}
