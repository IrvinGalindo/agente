# Dockerfile.manager - Interface web para gestionar Ollama
FROM node:18-alpine

# Instalar dependencias del sistema
RUN apk add --no-cache curl bash

# Crear directorio de la aplicaci√≥n
WORKDIR /app

# Crear package.json
COPY <<EOF package.json
{
  "name": "ollama-manager",
  "version": "1.0.0",
  "description": "Web interface for Ollama management",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "axios": "^1.6.0",
    "multer": "^1.4.5"
  }
}
EOF

# Instalar dependencias
RUN npm install

# Crear servidor Express
COPY <<'EOF' server.js
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;
const OLLAMA_URL = process.env.OLLAMA_URL || 'http://localhost:11434';

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Ruta principal - servir HTML
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API Routes
app.get('/api/models', async (req, res) => {
    try {
        const response = await axios.get(`${OLLAMA_URL}/api/tags`);
        res.json(response.data);
    } catch (error) {
        console.error('Error fetching models:', error.message);
        res.status(500).json({ error: 'No se pudo conectar con Ollama', details: error.message });
    }
});

app.post('/api/pull', async (req, res) => {
    const { model } = req.body;
    
    // Lista de modelos permitidos para cuentas gratuitas
    const allowedModels = [
        'tinyllama',
        'tinyllama:1.1b',
        'tinyllama:1.1b-chat-q4_0',
        'qwen2:0.5b',
        'phi3:mini-4k',
        'gemma:2b'
    ];
    
    if (!allowedModels.some(allowed => model.includes(allowed.split(':')[0]))) {
        return res.status(400).json({ 
            error: 'Modelo no permitido en plan gratuito',
            allowed: allowedModels
        });
    }
    
    try {
        // Iniciar descarga
        const response = await axios.post(`${OLLAMA_URL}/api/pull`, { name: model });
        res.json({ message: `Instalando ${model}...`, status: 'started' });
    } catch (error) {
        console.error('Error pulling model:', error.message);
        res.status(500).json({ error: 'Error instalando modelo', details: error.message });
    }
});

app.post('/api/generate', async (req, res) => {
    const { model = 'tinyllama', prompt, stream = false } = req.body;
    
    try {
        const response = await axios.post(`${OLLAMA_URL}/api/generate`, {
            model,
            prompt,
            stream
        });
        res.json(response.data);
    } catch (error) {
        console.error('Error generating text:', error.message);
        res.status(500).json({ error: 'Error generando texto', details: error.message });
    }
});

app.get('/api/status', async (req, res) => {
    try {
        const response = await axios.get(`${OLLAMA_URL}/api/tags`);
        res.json({ status: 'online', models: response.data?.models?.length || 0 });
    } catch (error) {
        res.status(500).json({ status: 'offline', error: error.message });
    }
});

// Manejo de errores global
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: 'Algo sali√≥ mal!' });
});

app.listen(PORT, () => {
    console.log(`üöÄ Ollama Manager corriendo en puerto ${PORT}`);
    console.log(`üì° Conectando a Ollama en: ${OLLAMA_URL}`);
});
EOF

# Crear directorio p√∫blico
RUN mkdir -p public

# Crear interface HTML
COPY <<'EOF' public/index.html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü¶ô Ollama Manager</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        .header { 
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { opacity: 0.9; font-size: 1.1em; }
        
        .content { padding: 30px; }
        .section { 
            margin-bottom: 40px; 
            padding: 20px;
            border-radius: 10px;
            background: #f8f9fa;
        }
        .section h2 { 
            color: #333; 
            margin-bottom: 20px;
            border-bottom: 2px solid #ee5a24;
            padding-bottom: 10px;
        }
        
        .button { 
            padding: 12px 24px; 
            margin: 8px; 
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white; 
            border: none; 
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
            display: inline-block;
        }
        .button:hover { 
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        .button.danger {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
        }
        .button.success {
            background: linear-gradient(45deg, #00d2d3, #54a0ff);
        }
        
        .input-group {
            display: flex;
            margin: 15px 0;
            gap: 10px;
        }
        .input-group input {
            flex: 1;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 25px;
            font-size: 16px;
        }
        .input-group input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .output { 
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px; 
            margin: 20px 0; 
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
            position: relative;
        }
        .output::before {
            content: 'üíª Terminal';
            position: absolute;
            top: -10px;
            left: 20px;
            background: #34495e;
            padding: 5px 15px;
            border-radius: 15px;
            font-size: 12px;
            color: #bdc3c7;
        }
        
        .status {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            margin-left: 10px;
        }
        .status.online { background: #2ecc71; color: white; }
        .status.offline { background: #e74c3c; color: white; }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        @media (max-width: 768px) {
            .container { margin: 10px; }
            .header { padding: 20px; }
            .header h1 { font-size: 2em; }
            .content { padding: 20px; }
            .input-group { flex-direction: column; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü¶ô Ollama Manager</h1>
            <p>Gesti√≥n de modelos LLM para Render</p>
            <div id="status-indicator">
                <span id="status-text">Verificando...</span>
            </div>
        </div>
        
        <div class="content">
            <div class="grid">
                <div class="section">
                    <h2>üì¶ Modelos Disponibles</h2>
                    <p>Modelos optimizados para cuentas gratuitas (< 500MB):</p>
                    <br>
                    <button class="button" onclick="installModel('tinyllama')">TinyLlama (637MB)</button>
                    <button class="button" onclick="installModel('tinyllama:1.1b-chat-q4_0')">TinyLlama Chat (400MB)</button>
                    <button class="button" onclick="installModel('qwen2:0.5b')">Qwen2 0.5B (500MB)</button>
                    <button class="button" onclick="installModel('gemma:2b')">Gemma 2B (1.4GB) ‚ö†Ô∏è</button>
                </div>
                
                <div class="section">
                    <h2>üîß Gesti√≥n</h2>
                    <button class="button success" onclick="listModels()">üìã Listar Modelos</button>
                    <button class="button success" onclick="checkStatus()">üìä Estado</button>
                    <button class="button danger" onclick="clearOutput()">üóëÔ∏è Limpiar</button>
                </div>
            </div>
            
            <div class="section">
                <h2>üí¨ Probar Modelo</h2>
                <div class="input-group">
                    <input type="text" id="prompt" placeholder="Escribe tu pregunta aqu√≠..." />
                    <button class="button" onclick="generateText()">üöÄ Generar</button>
                </div>
                <div class="input-group">
                    <select id="model-select">
                        <option value="tinyllama">TinyLlama</option>
                        <option value="qwen2:0.5b">Qwen2</option>
                        <option value="gemma:2b">Gemma</option>
                    </select>
                </div>
            </div>
            
            <div class="section">
                <h2>üìü Salida del Sistema</h2>
                <div id="output" class="output">Bienvenido al Ollama Manager ü¶ô\nPresiona cualquier bot√≥n para comenzar...</div>
            </div>
        </div>
    </div>

    <script>
    const API_BASE = window.location.origin;
    
    // Verificar estado al cargar
    document.addEventListener('DOMContentLoaded', () => {
        checkStatus();
        setInterval(checkStatus, 30000); // Verificar cada 30 segundos
    });
    
    function log(message) {
        const output = document.getElementById('output');
        const timestamp = new Date().toLocaleTimeString();
        output.textContent += `\n[${timestamp}] ${message}`;
        output.scrollTop = output.scrollHeight;
    }
    
    async function installModel(modelName) {
        log(`üîÑ Instalando ${modelName}... Esto puede tomar varios minutos.`);
        
        try {
            const response = await fetch(`${API_BASE}/api/pull`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ model: modelName })
            });
            const result = await response.json();
            
            if (response.ok) {
                log(`‚úÖ ${result.message}`);
                setTimeout(() => listModels(), 5000);
            } else {
                log(`‚ùå Error: ${result.error}`);
            }
        } catch (error) {
            log(`‚ùå Error de conexi√≥n: ${error.message}`);
        }
    }
    
    async function listModels() {
        log('üìã Obteniendo lista de modelos...');
        
        try {
            const response = await fetch(`${API_BASE}/api/models`);
            const data = await response.json();
            
            if (response.ok && data.models) {
                log(`‚úÖ Modelos instalados (${data.models.length}):`);
                data.models.forEach(model => {
                    log(`   - ${model.name} (${(model.size / 1024 / 1024 / 1024).toFixed(2)} GB)`);
                });
                
                // Actualizar selector de modelos
                const select = document.getElementById('model-select');
                select.innerHTML = '';
                data.models.forEach(model => {
                    const option = document.createElement('option');
                    option.value = model.name;
                    option.textContent = model.name;
                    select.appendChild(option);
                });
            } else {
                log('‚ùå No hay modelos instalados o error de conexi√≥n');
            }
        } catch (error) {
            log(`‚ùå Error: ${error.message}`);
        }
    }
    
    async function generateText() {
        const prompt = document.getElementById('prompt').value.trim();
        const model = document.getElementById('model-select').value;
        
        if (!prompt) {
            log('‚ö†Ô∏è Por favor escribe una pregunta');
            return;
        }
        
        log(`ü§ñ Generando respuesta con ${model}...`);
        log(`üë§ Pregunta: ${prompt}`);
        
        try {
            const response = await fetch(`${API_BASE}/api/generate`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    model: model,
                    prompt: prompt,
                    stream: false
                })
            });
            const result = await response.json();
            
            if (response.ok && result.response) {
                log(`ü¶ô Respuesta: ${result.response}`);
            } else {
                log(`‚ùå Error generando: ${result.error || 'Sin respuesta'}`);
            }
        } catch (error) {
            log(`‚ùå Error: ${error.message}`);
        }
        
        // Limpiar input
        document.getElementById('prompt').value = '';
    }
    
    async function checkStatus() {
        try {
            const response = await fetch(`${API_BASE}/api/status`);
            const data = await response.json();
            
            const statusText = document.getElementById('status-text');
            
            if (response.ok && data.status === 'online') {
                statusText.innerHTML = `Estado: <span class="status online">ONLINE</span> (${data.models} modelos)`;
            } else {
                statusText.innerHTML = `Estado: <span class="status offline">OFFLINE</span>`;
            }
        } catch (error) {
            document.getElementById('status-text').innerHTML = `Estado: <span class="status offline">ERROR</span>`;
        }
    }
    
    function clearOutput() {
        document.getElementById('output').textContent = 'Terminal limpiada... üßπ';
    }
    
    // Enter para enviar
    document.getElementById('prompt').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            generateText();
        }
    });
    </script>
</body>
</html>
EOF

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

EXPOSE 3000

CMD ["npm", "start"]